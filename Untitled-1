/**
 * Routing file
 * This file holds all the possible routes our app can make. It also has a reference to services to help keep logic out of this layer.
 */
'use strict';
import * as userService from '../services/userService';
import * as statusApiService from '../services/statusApiService';
import AsyncPolling from 'async-polling';

export default(app, sse) => {

    // We can create an API by this.
    app.get('/', (req, res) => {
        res.render('index');
    });

    app.get('/sse', (req, res) => {
        
 res.setHeader('Content-Type', 'text/event-stream');
 
        AsyncPolling(function (end) {
    // Do whatever you want. 
        
    // Then notify the polling when your job is done: 
    end();
    // This will schedule the next call. 
}, 3000).run();

        res.setHeader('Content-Type', 'text/event-stream');
        setInterval(() => {
            statusApiService.fetchStatus('http://demo.nginx.com/status/timestamp', (data) =>
            {
                // if(!err){
                res.write(`data: ${data}\n\n`);
                res.status(200)
                res.end();
                // }
            //     else {
            //     res.write(`data: error\n\n`);
            //     res.status(400)
            //     res.end();
            // }
            });           
        }, 2000);

    });

    /*
* C R U D : All Functions work with one or many depending on the query (u) passed in
*/

    /* Create User profiles */
    app.post('/api/user/', (req, res) => {
        userService.readUser(req.body, (err, data) => {
            if (!err) {
                console.log(data);
                res.status(201)
                res.json(data);
            } else {
                res.status(400)
                res.json(err);
            }
        });
    });

    /* Get User profiles (find all when req = {})*/
    app.get('/api/user/', (req, res) => {
        userService.readUser({}, (err, data) => {
            if (!err) {
                console.log(data);
                res.status(200)
                res.json(data);
            } else {
                res.status(400)
                res.json(err);
            }
        });
    });

    /* Get User profiles by id (email) */
    app.get('/api/user/:id', (req, res) => {
        userService.readUser({
            email: req.params.id
        }, (err, data) => {
            if (!err) {
                console.log(data);
                res.status(200)
                res.json(data);
            } else {
                res.status(400)
                res.json(err);
            }
        });
    });

        /* Register a new User profiles */
    app.post('/api/user/register', (req, res) => {
          console.log(req.body);
        userService.createUser(req.body, (err, data) => {
            console.log(data);
            if (!err) {
                res.status(200)
                res.json(data);
            } else {
                res.status(400)
                res.json(err);
            }
        });
    });

    /* Update User profiles by id (email) */
    app.put('/api/user/:id', (req, res) => {
        userService.updateUser({
            email: req.params.id
        }, (err, data) => {
            if (!err) {
                console.log(data);
                res.status(200)
                res.json(data);
            } else {
                res.status(400)
                res.json(err);
            }
        });
    });

    /* Delete User profiles by id (email) */
    app.delete('/api/user/:id', (req, res) => {
        userService.removeUser({
            email: req.params.id
        }, (err, data) => {
            if (!err) {
                console.log(data);
                res.status(200)
                res.json(data);
            } else {
                res.status(400)
                res.json(err);
            }
        });
    });

    /* Remove endPoint to User profiles */
    app.delete('/api/user/:id/removeEndpoint/:url', (req, res) => {

        userService.removeEndPointFromUser({
            email: u
        }, req.params.url, (err, data) => {
            if (!err) {
                console.log(data);
                res.status(200)
                res.json(data);
            } else {
                res.status(400)
                res.json(err);
            }
        });
    });

    /* Add endPoint to User profiles */
    app.post('/api/user/:id/addEndpoint/:url', (req, res) => {

        userService.addEndPointToUser({
            email: u
        }, req.params.url, (err, data) => {
            if (!err) {
                console.log(data);
                res.status(200)
                res.json(data);
            } else {
                res.status(400)
                res.json(err);
            }
        });
    });

}